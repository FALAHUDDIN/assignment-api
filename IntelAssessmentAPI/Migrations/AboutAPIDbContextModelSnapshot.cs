// <auto-generated />
using System;
using IntelAssessmentAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IntelAssessmentAPI.Migrations
{
    [DbContext(typeof(AboutAPIDbContext))]
    partial class AboutAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IntelAssessmentAPI.Models.Biography.Biography", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("Summary1")
                        .HasColumnType("text");

                    b.Property<string>("Summary2")
                        .HasColumnType("text");

                    b.Property<string>("Summary3")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("Biography");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Detail.Detail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FavouriteFood")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FreeTimeActivity")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<double?>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Hobby")
                        .HasColumnType("text");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("Interest")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("PassportNo")
                        .HasColumnType("text");

                    b.Property<string>("Pet")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("text");

                    b.Property<string>("Skill")
                        .HasColumnType("text");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile")
                        .IsUnique();

                    b.ToTable("Detail");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Education.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StudyField")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Image.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.JobHistory.JobHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Department")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("JobHistory");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Profile.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.SocMed.SocMed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid");

                    b.Property<string>("NameOfMedia")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.ToTable("SocMed");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Biography.Biography", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithMany("Biography")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Detail.Detail", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithOne("Detail")
                        .HasForeignKey("IntelAssessmentAPI.Models.Detail.Detail", "IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Education.Education", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithMany("Education")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Image.Image", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithMany("Image")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.JobHistory.JobHistory", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithMany("JobHistory")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.SocMed.SocMed", b =>
                {
                    b.HasOne("IntelAssessmentAPI.Models.Profile.Profile", "Profile")
                        .WithMany("SocMed")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("IntelAssessmentAPI.Models.Profile.Profile", b =>
                {
                    b.Navigation("Biography");

                    b.Navigation("Detail");

                    b.Navigation("Education");

                    b.Navigation("Image");

                    b.Navigation("JobHistory");

                    b.Navigation("SocMed");
                });
#pragma warning restore 612, 618
        }
    }
}
